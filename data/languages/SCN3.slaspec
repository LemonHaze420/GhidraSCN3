#########################################################################################################
# Scenario Script v3 VM processor module
# 
# 
#########################################################################################################
# Processor Configuration
#########################################################################################################
define endian=little;
define alignment=1;

define space ram        type=ram_space          size=4 default;
define space register   type=register_space     size=4;

define register offset=0x00 size=4 [ r0 r1 r2 r3 r14 sp ];

define token instr(8)
	OP = (0, 7);
define token immtoken1(8)
        imm8 = (0, 7);
define token immtoken2(16)
        imm16 = (0, 15);
define token immtoken4(32)
        imm32 = (0, 31);

#########################################################################################################
# Macros 
#########################################################################################################    
imm8t:          "#"^imm8         is imm8         { tmp:4 = imm8; export tmp; }
imm16t:         "#"^imm16        is imm16        { tmp:4 = imm16; export tmp; }
imm32t:         "#"^imm32        is imm32        { tmp:4 = imm32; export tmp; }

macro push32(x){
	sp = sp - 4;
	*:4 sp = x;  
}
macro push16(x){
	sp = sp - 4;
	*:4 sp = x;  
}
macro push8(x){
	sp = sp - 4;
	*:4 sp = x;  
}
macro pop32(x){
	x = *:4 sp;
	sp = sp + 4;
}
macro pop16(x){
	x = *:4 sp;
	sp = sp + 4;
}
macro pop8(x){
	x = *:4 sp;
	sp = sp + 4;
}

#########################################################################################################
# Instructions
#########################################################################################################
define pcodeop MOBJ1;
define pcodeop MOBJ2;
define pcodeop MOBJ3;
define pcodeop callSet2;
define pcodeop callSet3;
define pcodeop ShenmueFunc;
define pcodeop CallTblFn0;

:MOBJ1 imm8t             is OP=0x10 ; imm8t {
        MOBJ1(imm8t);
}
:MOBJ1 imm16t            is OP=0x20 ; imm16t {
        MOBJ1(imm16t);
}
:MOBJ1 imm32t            is OP=0x30 ; imm32t {
        MOBJ1(imm32t);
}

:MOBJ2 imm8t             is OP=0x11 ; imm8t {
        MOBJ2(imm8t);
}
:MOBJ2 imm16t            is OP=0x21 ; imm16t {
        MOBJ2(imm16t);
}
:MOBJ2 imm32t            is OP=0x31 ; imm32t {
        MOBJ2(imm32t);
}

:MOBJ3 imm8t             is OP=0x12 ; imm8t {
        MOBJ3(imm8t);
}
:MOBJ3 imm16t            is OP=0x22 ; imm16t {
        MOBJ3(imm16t);
}
:MOBJ3 imm32t            is OP=0x32 ; imm32t {
        MOBJ3(imm32t);
}


#########################################################################################################
# PUSH
#########################################################################################################
# @TODO: Clean these up, we can reduce how many we define by using bitmasks.


# (opcode & 0xc0) == 128 ? opcode & 0x3f == 0			is POP EAX
# (opcode & 0xc0) == 128 ? opcode & 0x3f == 1			is PUSH EAX

:PUSH "r14"             is OP=0x81 {
        push32(r14); 
}
:POP "r14"             is OP=0x80 {
        pop32(r14);
}

:PUSH imm8t             is OP=0x17 ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm16t            is OP=0x27 ; imm16t {
        local val = imm16t;
        push16(val);        
}
:PUSH imm32t            is OP=0x37 ; imm32t {
        local val = imm32t;
        push32(val);         
}
:PUSH imm8t             is OP=0x50 ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm8t             is OP=0x51 ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm16t            is OP=0x52 ; imm16t {
        local val = imm16t;
        push16(val);
}
:PUSH imm32t            is OP=0x53 ; imm32t {
        local val = imm32t;
        push32(val); 
}
:PUSH imm8t             is OP=0x5E ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm8t             is OP=0x5D ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm8t             is OP=0x5C ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm8t             is OP=0x5F ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm16t             is OP=0x60 ; imm16t {
        local val = imm16t;
        push16(val); 
}
:PUSH imm8t             is OP=0x61 ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm16t            is OP=0x62 ; imm16t {
        local val = imm16t;
        push16(val); 
}
:PUSH imm32t            is OP=0x63 ; imm32t {
        local val = imm32t;
        push32(val); 
}
:PUSH imm16t            is OP=0x68 ; imm16t {
        local val = imm16t;
        push16(val); 
}
:PUSH imm16t             is OP=0x6A ; imm16t {
        local val = imm16t;
        push16(val);
}
:PUSH imm16t             is OP=0x6F ; imm16t {
        local val = imm16t;
        push16(val);
}
:PUSH imm16t             is OP=0x6B ; imm16t {
        local val = imm16t;
        push16(val);
}
:PUSH imm16t             is OP=0x6E ; imm16t {
        local val = imm16t;
        push16(val);
}
:PUSH imm32t             is OP=0x70 ; imm32t {
        local val = imm32t;
        push32(val); 
}
:PUSH imm8t             is OP=0x71 ; imm8t {
        local val = imm8t;
        push8(val);
}
:PUSH imm16t            is OP=0x72 ; imm16t {
        local val = imm16t;
        push16(val); 
}
:PUSH imm32t            is OP=0x73 ; imm32t {
        local val = imm32t;
        push32(val);      
}

#0x82 	        1000 0010 	[MOBJ] Reads 8-bit value from cycle pointer
:RD8CYCL        is OP=0x82  {
        # @ TODO
}

#0x83 	        1000 0011 	[MOBJ] Reads 16-bit value from cycle pointer
:RD16CYCL        is OP=0x83  {
        # @ TODO
}

#0x84 	        1000 0100 	[MOBJ] Reads 32-bit value from cycle pointer
:RD32CYCL        is OP=0x84  {
        # @ TODO
}

#0x85 	        1000 0101 	[MOBJ] Writes 8-bit to cycle pointer
:WR8CYCL         is OP=0x85  {
        # @ TODO
}

#0x86 	        1000 0110 	[MOBJ] Writes 16-bit to cycle pointer
:WR16CYCL        is OP=0x86  {
        # @ TODO
}

#0x87 	        1000 0111 	[MOBJ] Writes 32-bit to cycle pointer
:WR32CYCL        is OP=0x87  {
        # @ TODO
}

#########################################################################################################
# ADD SP, #X
#########################################################################################################
:ADD "SP, " imm8t             is OP=0x13 ; imm8t {
        sp = sp + imm8t;
}
:ADD "SP, " imm16t            is OP=0x23 ; imm16t {
        sp = sp + imm16t;     
}
:ADD "SP, " imm32t            is OP=0x33 ; imm32t {
        sp = sp + imm32t;       
}

#########################################################################################################
# JMP
#########################################################################################################

# JMP by IMM + other val
:JMP imm8t             is OP=0x14 ; imm8t {
        goto [imm8t + inst_start];
}
:JMP imm16t            is OP=0x24 ; imm16t {
        goto [imm16t + inst_start];
}
:JMP imm32t            is OP=0x34 ; imm32t {
        goto [imm32t + inst_start];
}

# JMP by IMM
:JMP imm8t             is OP=0x15 ; imm8t {
        goto [imm8t + inst_start];
}
:JMP imm16t            is OP=0x25 ; imm16t {
        goto [imm16t + inst_start];
}
:JMP imm32t            is OP=0x35 ; imm32t {
        goto [imm32t + inst_start];
}

# IF R14 is zero, then JMP...
:JZ imm8t             is OP=0x16 ; imm8t {
        if ( r14 != 0 ) goto inst_next;
        goto [imm8t+inst_start];
}
:JZ imm16t            is OP=0x26 ; imm16t {
        if ( r14 != 0 ) goto inst_next;
        goto [imm16t+inst_start];
}
:JZ imm32t            is OP=0x36 ; imm32t {
        if ( r14 != 0 ) goto inst_next;
        goto [imm32t+inst_start];
}

#########################################################################################################
# CALL
#########################################################################################################

:CALL imm8t             is OP=0x19 ; imm8t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet3(imm8t, val1, val2, val3, val4);
}

:CALL imm16t            is OP=0x29 ; imm16t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet3(imm16t, val1, val2, val3, val4);
}
:CALL imm32t            is OP=0x39 ; imm32t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet3(imm32t, val1, val2, val3, val4);
}

:CALL imm8t             is OP=0x1A ; imm8t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet2(imm8t, val1, val2, val3, val4);
}
:CALL imm16t            is OP=0x2A ; imm16t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet2(imm16t, val1, val2, val3, val4);
}
:CALL imm32t            is OP=0x3A ; imm32t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        callSet2(imm32t, val1, val2, val3, val4);
}

# Shenmue Fn Table
:CALL_SSF imm8t             is OP=0x1B ; imm8t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        ShenmueFunc(imm8t, val1, val2, val3, val4);
}
:CALL_SSF imm16t            is OP=0x2B ; imm16t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        ShenmueFunc(imm16t, val1, val2, val3, val4);
}
:CALL_SSF imm32t            is OP=0x3B ; imm32t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        ShenmueFunc(imm32t, val1, val2, val3, val4);
}

:CALL imm8t             is OP=0x1C ; imm8t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm8t, val1, val2, val3, val4);
}
:CALL imm16t            is OP=0x2C ; imm16t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm16t, val1, val2, val3, val4);
}
:CALL imm32t            is OP=0x3C ; imm32t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm32t, val1, val2, val3, val4);
}

:CALL imm8t             is OP=0x1D ; imm8t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm8t, val1, val2, val3, val4);
}
:CALL imm16t            is OP=0x2D ; imm16t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm16t, val1, val2, val3, val4);
}
:CALL imm32t            is OP=0x3D ; imm32t {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        local val3:4 = *:4 (sp + 8);
        local val4:4 = *:4 (sp + 12);

        CallTblFn0(imm32t, val1, val2, val3, val4);
}

# Invalid Opcode
:RET            is OP=0x00 {
        tmp:4 = 0;
        return [tmp];
}

#########################################################################################################
# Operators
#########################################################################################################

:NEG "r0"           is OP=0x8E {
        local val1:4 = *:4 sp;
        *:4 sp = ~val1;
}
:AND "r1, r0"       is OP=0x8F  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  & val1;        
}
:OR  "r1, r0"       is OP=0x90  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  | val1;  
}
:XOR "r1, r0"        is OP=0x91  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  ^ val1;  
}
:ADD "r1, r0"         is OP=0x92  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  + val1;  
}
:SUB "r1, r0"        is OP=0x93  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  - val1;  
}
:MUL "r1, r0"        is OP=0x94  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  * val1;  
}
:DIV "r1, r0"        is OP=0x95  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  / val1;  
}
:MOD "r1, r0"        is OP=0x96  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  % val1;  
}
:LSHIFT "r1, r0"       is OP=0x97  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  << val1;  
}
:RSHIFT "r1, r0"       is OP=0x98  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val2  >> val1;  
}
:CAST_FLOAT "r0"       is OP=0x9D  {
        local val1:4 = *:4 sp;
        *:4 (sp + 4) = int2float(val1);  
}
:FADD   "r1, r0"     is OP=0xA3  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val1  f+ val2;          
}
:FSUB   "r1, r0"     is OP=0xA4  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val1  f- val2;                  
}
:FMUL   "r1, r0"     is OP=0xA5  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val1  f* val2;          
}
:FDIV   "r1, r0"     is OP=0xA6  {
        local val1:4 = *:4 sp;
        local val2:4 = *:4 (sp + 4);
        *:4 (sp + 4) = val1  f/ val2;          
}

#########################################################################################################
# Incomplete
#########################################################################################################

#0x88 	        1000 1000 	==
:IS_EQU          is OP=0x88  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 == tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x89 	        1000 1001 	!=
:IS_NEQ          is OP=0x89  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 != tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x8A 	        1000 1010 	>=
:gt"/eq"         is OP=0x8A  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 >= tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x8B 	        1000 1011 	>
:gt           is OP=0x8B  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 > tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x8C 	        1000 1100 	<=
:lt"/eq"         is OP=0x8C  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 <= tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x8D 	        1000 1101 	<
:lt           is OP=0x8D  {
        local tr0:4 = *:4 (sp);
        local tr1:4 = *:4 (sp + 4);
        
        if ( tr0 < tr1 ) goto <true>;
        goto <false>;
        <true>
        r14 = 1;
        goto inst_next;
        <false>
        r14 = 0;
}

#0x9E 	        1001 1110 	signed cast
:CAST_SIGN        is OP=0x9E  {
        # @ TODO
}

#0x9F 	        1001 1111 	(float) <=
:flt"/eq"        is OP=0x9F  {
        # @ TODO
}

#0xA0 	        1010 0000 	(float) <
:f"/lt"        is OP=0xA0  {
        # @ TODO
}

#0xA1 	        1010 0001 	(float) >= (<= inverted)
:fgt"/eq"        is OP=0xA1  {
        # @ TODO
}
#0xA2 	        1010 0010 	(float) > (< inverted)
:f"/gt"        is OP=0xA2  {
        # @ TODO
}

#0x40 - 0x4F 	0100 xxxx 	Writes value from last time to stack